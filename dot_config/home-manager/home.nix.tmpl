{ config, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "22.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    # basic
    pkgs.git

    # folder management
    pkgs.yazi

    # minio
    pkgs.minio-client

    pkgs.chezmoi

    # Editor
    pkgs.helix
    pkgs.neovim
    pkgs.unzip
    pkgs.file

    pkgs.wget
    pkgs.zoxide
    pkgs.fzf
    # pkgs.zsh
    pkgs.eza
    pkgs.atuin
    pkgs.ghq
    pkgs.bat

    # pkgs.ripgrep-all
    pkgs.ripgrep
    pkgs.gh
    pkgs.tldr
    pkgs.tmux
    pkgs.viddy
    pkgs.delta
    pkgs.git-lfs
    pkgs.jq
    pkgs.yq

    # Terraform
    pkgs.terraform-ls
    pkgs.trivy
    pkgs.tflint
    pkgs.infracost
    pkgs.pre-commit
    # pkgs.checkov
    pkgs.terraform-docs
    pkgs.terrascan
    pkgs.tfupdate
    pkgs.hcledit

    # AWS
    pkgs.awscli2
    pkgs.ssm-session-manager-plugin

    # Lua
    pkgs.lua

    # Containers
    pkgs.skopeo
    pkgs.syft
{{- if eq .osid "arm64-darwin" }}
    # For xiaopei
    pkgs.aichat
{{- end}}

    # Lazy
    pkgs.lazygit
    pkgs.lazydocker

    pkgs.zellij

    # k8s
    pkgs.kubectl
    pkgs.kubectx
    pkgs.kubecm
    pkgs.kubernetes-helm
    pkgs.argocd

    # youtube
    pkgs.yt-dlp

    # ntfy
    pkgs.ntfy-sh

    # asdf dependencies
    # pkgs.rlwrap
    # pkgs.gnupg
    # pkgs.xz
    # pkgs.readline

    # use mise to replace asdf
    pkgs.mise

    # localhost
    pkgs.ngrok

    # devbox
    pkgs.devbox

    # bitwarden
    pkgs.rbw
    pkgs.pinentry-tty

    # golang
    pkgs.golangci-lint

    # justfile
    pkgs.just
  ];

  programs.starship = { enable = true; };
  programs.direnv = { enable = true; };

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # You can also manage environment variables but you will have to manually
  # source
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/zhaochunqi/etc/profile.d/hm-session-vars.sh
  #
  # if you don't want to manage your shell through Home Manager.
  home.sessionVariables = {
    # EDITOR = "emacs";
  };



  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}

